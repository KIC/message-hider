name: Build Executables

on:
  push:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [linux, windows-latest, macos-latest] # Use debian-bookworm for Linux builds
    runs-on: ${{ matrix.os == 'linux' && 'ubuntu-latest' || matrix.os }}
    container: ${{ matrix.os == 'linux' && 'debian:bookworm' || null }}
    env:
      MAIN_PY_FILE: "main.py"
    steps:
      - name: Install GIT (Linux)
        if: matrix.os == 'linux'
        run: |
          apt-get update
          apt-get install -y git
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install dependencies (Linux)
        if: matrix.os == 'linux'
        run: |
          apt-get update
          apt-get install -y ffmpeg python3 python3-pip python3-venv
          python3 -m venv .venv
          . .venv/bin/activate
          pip install --upgrade -r requirements.txt
          pip install --upgrade pyinstaller
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install ffmpeg -y

          pip install --upgrade -r requirements.txt
          pip install --upgrade pyinstaller
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $HOME/.zprofile
          eval "$(/opt/homebrew/bin/brew shellenv)"
          brew install ffmpeg

          pip install --upgrade -r requirements.txt
          pip install --upgrade pyinstaller
      - name: Build (Linux)
        if: matrix.os == 'linux'
        run: |
          ldd --version
          . .venv/bin/activate
          pyinstaller src/app/${{ env.MAIN_PY_FILE }} --onefile --name hider --add-data "binaries/:binaries/"
          # smoke test
          ./dist/hider audio hide --secret "geheimnins" -o /tmp/ src/tests/data/short.mp3 
          ./dist/hider audio reveil /tmp/short.mp3

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir tmp
          pyinstaller src/app/${{ env.MAIN_PY_FILE }} --onefile --name hider --add-data "binaries/:binaries/"
          # smoke test
          ./dist/hider.exe audio hide --secret "geheimnins" -o tmp/ src/tests/data/short.mp3 
          ./dist/hider.exe audio reveil tmp/short.mp3

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller src/app/${{ env.MAIN_PY_FILE }} --onefile --name hider --add-data "binaries/:binaries/"
          # smoke test
          ./dist/hider audio hide --secret "geheimnins" -o /tmp/ src/tests/data/short.mp3 
          ./dist/hider audio reveil /tmp/short.mp3

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-executable
          path: dist/hider.exe
      - name: Upload artifact (Linux)
        if: matrix.os == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-executable
          path: dist/hider
      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-executable
          path: dist/hider

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Download Windows executable
        uses: actions/download-artifact@v4
        with:
          name: windows-executable
          path: windows-executable
      - name: Download Linux executable
        uses: actions/download-artifact@v4
        with:
          name: linux-executable
          path: linux-executable
      - name: Download macOS executable
        uses: actions/download-artifact@v4
        with:
          name: macos-executable
          path: macos-executable
      - name: Verify artifacts
        run: |
          ls -l *
          set -e
          test -f windows-executable/hider.exe || (echo "Missing windows-executable/hider.exe" && exit 1)
          test -f linux-executable/hider || (echo "Missing linux-executable/hider" && exit 1)
          test -f macos-executable/hider || (echo "Missing macos-executable/hider" && exit 1)
          echo "All expected artifacts are present."
      - name: Create release
        uses: actions/create-release@v1
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_NAME: "Release ${{ github.run_number }}"
        with:
          tag_name: "v${{ github.run_number }}"
          release_name: "Release ${{ github.run_number }}"
          body: "Automated release created by GitHub Actions."
      - name: Set upload_url output
        shell: bash
        run: echo "UPLOAD_URL=${{ steps.create-release.outputs.upload_url }}" >> $GITHUB_ENV
      - name: Upload release asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: windows-executable/hider.exe
          asset_name: hider.exe
          asset_content_type: application/octet-stream
      - name: Upload release asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: linux-executable/hider
          asset_name: hider
          asset_content_type: application/octet-stream
      - name: Upload macOS executable with logging
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: macos-executable/hider
          asset_name: mc-hider
          asset_content_type: application/octet-stream
